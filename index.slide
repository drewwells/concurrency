Concurrency NodeJS and Golang
December 2014

Drew Wells
RetailMeNot
dwells@rmn.com
@coldfuser
http://github.com/drewwells/concurrency/index.slide

* Birthdays

- NodeJS 2009, JavaScript 1995
# semantics and design influenced by Self and Scheme
- Go 2007

Syntax derived from C

* Why NodeJS?

- Ryan Dahl, creator of NodeJS, was inspired to create Node.js after seeing a file upload progress bar on Flickr.

.image images/flickr.png _ 700

* Why Golang?

- Go is about language design in the service of software engineering.

# Garbage Collection, Multicore processors, networked systems, efficient dependency management, fast build times

.image images/datacenter.jpg _ 700

* Why not Language ___?

* Interest over time

.image images/interest.png _ 800
.caption Google Trends for [[http://www.google.com/trends/explore#q=nodejs%2C%20golang][NodeJS and Golang]]

* A long way to go

.image images/php.png _ 800

* What language?

*** NodeJS

.image images/nodejslanguage.png _ 800
.caption languages used to create NodeJS

*** Go

- 70% Go, 30% C


* NodeJS

* Design

- Single Threaded

- Event Loop
# Almost no function in Node directly performs I/O, so the process never blocks. Because nothing blocks, less-than-expert programmers are able to develop scalable systems.
- V8 + Evented I/O

- Non-blocking

# http://nodejs.org/about/

* If you can't beat them, join them

- Ruby's Event Machine

- Python's Twisted

"Almost no function in Node directly performs I/O, so the process never blocks. Because nothing blocks, less-than-expert programmers are able to develop scalable systems."

.link http://nodejs.org/about
# Concurrency is hard, so no attempts are made to deal with it.

* walker.js

.code example/walker.js

* HTTP example

.code nodeserver/server.js

# In Node there is no such start-the-event-loop call. Node simply enters the event loop after executing the input script. Node exits the event loop when there are no more callbacks to perform. This behavior is like browser JavaScript -â€” the event loop is hidden from the user.

* Debug tools

    node debug server.js

.link https://github.com/node-inspector/node-inspector node-inspector

* child_process.fork()

- No shared memory

- 30ms startup 10mb memory

- synchronous channel via child.send()
# Sending large data in this way is ill advised

* Golang

* Design

- compiled, concurrent, garbage-collected, statically typed language

- Networking and Multicore support

- Type system, Garbage collection

- basic syntax modeled after c
# It's been pointed out that C's read in a spiral! See The "Clockwise/Spiral Rule" by David Anderson.
- Build time
#When builds are slow, there is time to think. The origin myth for Go states that it was during one of those 45 minute builds that Go was conceived.

.image images/gopher-help.png

* Declarative Syntax

    i int
    p *int
    a [3]int

*** Functions

    func main(arga int, argv []string) int

*** Scales well

    func sum(func(int) int, int) func() int {
        return func() int { return 1 }
    }

* Declarative Syntax cont.d

    a [3]int
    a[2]

Pointers

    *(*int)(ptr)

* Parallelism

- Goroutines

- Multiplexed on a single thread

- GOMAXPROCS

- Hundreds of thousands of goroutines per thread

* Parallelism

.play example/parallel.go

* Concurrency

In programming, concurrency is the composition of independently executing processes, while parallelism is the simultaneous execution of (possibly related) computations. Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.

.link http://blog.golang.org/concurrency-is-not-parallelism

* Concurrency

- goroutine

- channels (CSP)

- waitgroup

* Channel

.play example/deadlock.go

* Buffered Channel

- Unbuffered channels only accept sends (chan <-) if there is a corresponding receive (<- chan)

.play example/channel.go

* Buffered Channel

.play example/cochannel.go

* Waitgroup

.play example/wait.go

* Learning

.link http://gobyexample.com

.link http://howtonode.org
